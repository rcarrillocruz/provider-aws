/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// VPNGatewayParameters defines the desired state of VPNGateway
type VPNGatewayParameters struct {
	// Region is which region the VPNGateway will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A private Autonomous System Number (ASN) for the Amazon side of a BGP session.
	// If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If
	// you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range.
	//
	// Default: 64512
	AmazonSideASN *int64 `json:"amazonSideASN,omitempty"`
	// The Availability Zone for the virtual private gateway.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`
	// Checks whether you have the required permissions for the action, without
	// actually making the request, and provides an error response. If you have
	// the required permissions, the error response is DryRunOperation. Otherwise,
	// it is UnauthorizedOperation.
	DryRun *bool `json:"dryRun,omitempty"`
	// The tags to apply to the virtual private gateway.
	TagSpecifications []*TagSpecification `json:"tagSpecifications,omitempty"`
	// The type of VPN connection this virtual private gateway supports.
	// +kubebuilder:validation:Required
	Type                       *string `json:"type_"`
	CustomVPNGatewayParameters `json:",inline"`
}

// VPNGatewaySpec defines the desired state of VPNGateway
type VPNGatewaySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VPNGatewayParameters `json:"forProvider"`
}

// VPNGatewayObservation defines the observed state of VPNGateway
type VPNGatewayObservation struct {
	// The current state of the virtual private gateway.
	State *string `json:"state,omitempty"`
	// Any tags assigned to the virtual private gateway.
	Tags []*Tag `json:"tags,omitempty"`
	// Any VPCs attached to the virtual private gateway.
	VPCAttachments []*VPCAttachment `json:"vpcAttachments,omitempty"`
	// The ID of the virtual private gateway.
	VPNGatewayID *string `json:"vpnGatewayID,omitempty"`
}

// VPNGatewayStatus defines the observed state of VPNGateway.
type VPNGatewayStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VPNGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPNGateway is the Schema for the VPNGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VPNGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPNGatewaySpec   `json:"spec"`
	Status            VPNGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPNGatewayList contains a list of VPNGateways
type VPNGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPNGateway `json:"items"`
}

// Repository type metadata.
var (
	VPNGatewayKind             = "VPNGateway"
	VPNGatewayGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPNGatewayKind}.String()
	VPNGatewayKindAPIVersion   = VPNGatewayKind + "." + GroupVersion.String()
	VPNGatewayGroupVersionKind = GroupVersion.WithKind(VPNGatewayKind)
)

func init() {
	SchemeBuilder.Register(&VPNGateway{}, &VPNGatewayList{})
}
